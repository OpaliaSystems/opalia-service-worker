## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
## Logging settings

# log level options: OFF, ERROR, WARNING, INFO, DEBUG
log.level = "DEBUG"

# path to deploy temporary files for logging system
log.deployment-path = ${base-path}"/"

# define sinks here (disable logging by passing it to /dev/null)
log.sinks = [
  {
    name = "console"
    file-path = "//console"
  },
  {
    name = "application"
    file-path = ${base-path}"/application.log"
    charset = "UTF-8"
  },
  {
    name = "statistics"
    file-path = ${base-path}"/stats.log"
    charset = "UTF-8"
  }
]

# define mapping from loggers to sinks
log.logger-sink-mapping = {
  "systems.opalia.service.base.database.api.DatabaseService-statistics" = ["statistics"]
  "systems.opalia.service.base.worker.api.WorkerService-statistics" = ["statistics"]
  "systems.opalia.service.base.http.api.HttpService-statistics" = ["statistics"]
}

# the default sinks for all unmapped loggers
log.logger-sink-mapping-default = ["console", "application"]

## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
## Worker settings

worker {
  akka {

    # Log at info level when messages are sent to dead letters.
    # Possible values:
    # on: all dead letters are logged
    # off: no logging of dead letters
    # n: positive integer, number of dead letters that will be logged
    log-dead-letters = off

    jvm-exit-on-fatal-error = off
    remote.log-remote-lifecycle-events = off

    actor {
      default-dispatcher {
        # Dispatcher is the name of the event-based dispatcher
        type = Dispatcher

        # What kind of ExecutionService to use
        executor = "fork-join-executor"

        # Configuration for the fork join pool
        fork-join-executor {
          # Min number of threads to cap factor-based parallelism number to
          parallelism-min = 4
          # Max number of threads to cap factor-based parallelism number to
          parallelism-max = 100
          # Parallelism (threads) ... ceil(available processors * factor)
          parallelism-factor = 4.0
        }

        # Throughput defines the maximum number of messages to be
        # processed per actor before the thread jumps to the next actor.
        # Set to 1 for as fair as possible.
        throughput = 2
      }

      deployment {
        /workerFrontend/workerBackendRouter = {

          router = round-robin-group

          # Use the following settings in production mode:
          # router = cluster-metrics-adaptive-group
          # metrics-selector = mix
          ## metrics-selector = cpu
          ## metrics-selector = heap
          ## metrics-selector = load

          routees.paths = ["/user/workerBackend"]

          cluster {
            enabled = on
            use-role = backend
            allow-local-routees = on
          }
        }
      }
    }
  }

  # The maximum time to wait for the result of a worker.
  process-timeout = "4 seconds"

  # path for the provision of native libraries
  native-library-path = ${base-path}"/lib-native/sigar-loader"
}

## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
